graph = {
    'A': [('B', 15), ('C', 12)],
    'B': [('D', 25), ('E', 20)],
    'C': [('F', 30)],
    'D': [],
    'E': [],
    'F': []
}
heuristic = {
    'A': 10,
    'B': 15,
    'C': 12,
    'D': 25,
    'E': 20,
    'F': 30
}
def hill_climbing(start):
    current = start
    path = [current]
    while True:
        neighbors = graph[current]
        if not neighbors:
            break
        best_neighbor = max(neighbors, key=lambda x: x[1])
        if best_neighbor[1] <= heuristic[current]:
            break
        current = best_neighbor[0]
        path.append(current)
    return path, heuristic[current]
path, best_value = hill_climbing('A')
print("Path followed:", path)
print("Reached local maximum:", best_value)
